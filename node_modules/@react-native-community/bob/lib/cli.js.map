{"version":3,"sources":["../src/cli.ts"],"names":["name","require","root","process","cwd","explorer","searchPlaces","FLOW_PRGAMA_REGEX","yargs","command","CreateArgs","create","pak","path","join","shouldContinue","inquirer","prompt","type","message","default","exit","fs","pathExists","logger","source","validate","input","Boolean","entryFile","pkg","JSON","parse","readFile","questions","choices","length","endsWith","test","push","Object","keys","devDependencies","includes","output","targets","flow","target","undefined","entries","module","types","tsconfig","writeFile","stringify","compilerOptions","allowUnreachableCode","allowUnusedLabels","esModuleInterop","forceConsistentCasingInFileNames","jsx","lib","moduleResolution","noFallthroughCasesInSwitch","noImplicitReturns","noImplicitUseStrict","noStrictGenericChecks","noUnusedLocals","noUnusedParameters","resolveJsonModule","skipLibCheck","strict","prepare","files","key","entry","replace","scripts","slice","sort","update","filter","file","map","t","jest","modulePathIgnorePatterns","eslintIgnore","ignorefiles","ignorefile","content","split","success","argv","result","search","config","$0","options","relative","filepath","report","info","warn","error","targetName","Array","isArray","targetOptions","chalk","blue","resolve","demandCommand","recommendCommands"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport yargs from 'yargs';\nimport inquirer from 'inquirer';\nimport { cosmiconfigSync } from 'cosmiconfig';\nimport isGitDirty from 'is-git-dirty';\nimport create, { args as CreateArgs } from './create';\nimport * as logger from './utils/logger';\nimport buildAAR from './targets/aar';\nimport buildCommonJS from './targets/commonjs';\nimport buildModule from './targets/module';\nimport buildTypescript from './targets/typescript';\nimport type { Options } from './types';\n\n// eslint-disable-next-line import/no-commonjs\nconst { name } = require('../package.json');\n\nconst root = process.cwd();\nconst explorer = cosmiconfigSync(name, {\n  searchPlaces: ['package.json', `bob.config.js`],\n});\n\nconst FLOW_PRGAMA_REGEX = /\\*?\\s*@(flow)\\b/m;\n\n// eslint-disable-next-line babel/no-unused-expressions\nyargs\n  .command('create <name>', 'create a react native library', CreateArgs, create)\n  .command('init', 'configure the package to use bob', {}, async () => {\n    const pak = path.join(root, 'package.json');\n\n    if (isGitDirty()) {\n      const { shouldContinue } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'shouldContinue',\n        message: `The working directory is not clean. You should commit or stash your changes before configuring bob. Continue anyway?`,\n        default: false,\n      });\n\n      if (!shouldContinue) {\n        process.exit(1);\n      }\n    }\n\n    if (!(await fs.pathExists(pak))) {\n      logger.exit(\n        `Couldn't find a 'package.json' file in '${root}'. Are you in a project folder?`\n      );\n    }\n\n    const { source } = await inquirer.prompt({\n      type: 'input',\n      name: 'source',\n      message: 'Where are your source files?',\n      default: 'src',\n      validate: (input) => Boolean(input),\n    });\n\n    let entryFile;\n\n    if (await fs.pathExists(path.join(root, source, 'index.js'))) {\n      entryFile = 'index.js';\n    } else if (await fs.pathExists(path.join(root, source, 'index.ts'))) {\n      entryFile = 'index.ts';\n    } else if (await fs.pathExists(path.join(root, source, 'index.tsx'))) {\n      entryFile = 'index.tsx';\n    }\n\n    if (!entryFile) {\n      logger.exit(\n        `Couldn't find a 'index.js'. 'index.ts' or 'index.tsx' file under '${source}'. Please re-run the CLI after creating it.`\n      );\n      return;\n    }\n\n    const pkg = JSON.parse(await fs.readFile(pak, 'utf-8'));\n    const questions: inquirer.Question[] = [\n      {\n        type: 'input',\n        name: 'output',\n        message: 'Where do you want to generate the output files?',\n        default: 'lib',\n        validate: (input) => Boolean(input),\n      },\n      {\n        type: 'checkbox',\n        name: 'targets',\n        message: 'Which targets do you want to build?',\n        // @ts-ignore\n        choices: ['aar', 'commonjs', 'module', 'typescript'],\n        validate: (input) => Boolean(input.length),\n      },\n    ];\n\n    if (\n      entryFile.endsWith('.js') &&\n      FLOW_PRGAMA_REGEX.test(\n        await fs.readFile(path.join(root, source, entryFile), 'utf-8')\n      )\n    ) {\n      questions.push({\n        type: 'confirm',\n        name: 'flow',\n        message: 'Do you want to publish definitions for flow?',\n        default: Object.keys(pkg.devDependencies || {}).includes('flow-bin'),\n      });\n    }\n\n    const { output, targets, flow } = await inquirer.prompt(questions);\n\n    const target =\n      targets[0] === 'commonjs' || targets[0] === 'module'\n        ? targets[0]\n        : undefined;\n\n    const entries: { [key: string]: string } = {\n      'main': target\n        ? path.join(output, target, 'index.js')\n        : path.join(source, entryFile),\n      'react-native': path.join(source, entryFile),\n    };\n\n    if (targets.includes('module')) {\n      entries.module = path.join(output, 'module', 'index.js');\n    }\n\n    if (targets.includes('typescript')) {\n      entries.types = path.join(output, 'typescript', source, 'index.d.ts');\n\n      if (!(await fs.pathExists(path.join(root, 'tsconfig.json')))) {\n        const { tsconfig } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'tsconfig',\n          message: `You have enabled 'typescript' compilation, but we couldn't find a 'tsconfig.json' in project root. Generate one?`,\n          default: true,\n        });\n\n        if (tsconfig) {\n          await fs.writeFile(\n            path.join(root, 'tsconfig.json'),\n            JSON.stringify(\n              {\n                compilerOptions: {\n                  allowUnreachableCode: false,\n                  allowUnusedLabels: false,\n                  esModuleInterop: true,\n                  forceConsistentCasingInFileNames: true,\n                  jsx: 'react',\n                  lib: ['esnext'],\n                  module: 'esnext',\n                  moduleResolution: 'node',\n                  noFallthroughCasesInSwitch: true,\n                  noImplicitReturns: true,\n                  noImplicitUseStrict: false,\n                  noStrictGenericChecks: false,\n                  noUnusedLocals: true,\n                  noUnusedParameters: true,\n                  resolveJsonModule: true,\n                  skipLibCheck: true,\n                  strict: true,\n                  target: 'esnext',\n                },\n              },\n              null,\n              2\n            )\n          );\n        }\n      }\n    }\n\n    const prepare = 'bob build';\n    const files = [\n      source,\n      output,\n      '!**/__tests__',\n      '!**/__fixtures__',\n      '!**/__mocks__',\n    ];\n\n    for (const key in entries) {\n      const entry = entries[key];\n\n      if (pkg[key] && pkg[key] !== entry) {\n        const { replace } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'replace',\n          message: `Your package.json has the '${key}' field set to '${pkg[key]}'. Do you want to replace it with '${entry}'?`,\n          default: true,\n        });\n\n        if (replace) {\n          pkg[key] = entry;\n        }\n      } else {\n        pkg[key] = entry;\n      }\n    }\n\n    if (pkg.scripts && pkg.scripts.prepare && pkg.scripts.prepare !== prepare) {\n      const { replace } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'replace',\n        message: `Your package.json has the 'scripts.prepare' field set to '${pkg.scripts.prepare}'. Do you want to replace it with '${prepare}'?`,\n        default: true,\n      });\n\n      if (replace) {\n        pkg.scripts.prepare = prepare;\n      }\n    } else {\n      pkg.scripts = pkg.scripts || {};\n      pkg.scripts.prepare = prepare;\n    }\n\n    if (\n      pkg.files &&\n      JSON.stringify(pkg.files.slice().sort()) !==\n        JSON.stringify(files.slice().sort())\n    ) {\n      const { update } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'update',\n        message: `Your package.json already has a 'files' field. Do you want to update it?`,\n        default: true,\n      });\n\n      if (update) {\n        pkg.files = [\n          ...files,\n          ...pkg.files.filter(\n            (file: string) => !files.includes(file.replace(/\\/$/g, ''))\n          ),\n        ];\n      }\n    } else {\n      pkg.files = files;\n    }\n\n    pkg[name] = {\n      source,\n      output,\n      targets: targets.map((t: string) => {\n        if (t === target && flow) {\n          return [t, { flow }];\n        }\n\n        return t;\n      }),\n    };\n\n    if (pkg.jest) {\n      const entry = `<rootDir>/${output}/`;\n\n      if (pkg.jest.modulePathIgnorePatterns) {\n        const { modulePathIgnorePatterns } = pkg.jest;\n\n        if (!modulePathIgnorePatterns.includes(entry)) {\n          modulePathIgnorePatterns.push(entry);\n        }\n      } else {\n        pkg.jest.modulePathIgnorePatterns = [entry];\n      }\n    }\n\n    pkg.eslintIgnore = pkg.eslintIgnore || ['node_modules/'];\n\n    if (!pkg.eslintIgnore.includes(`${output}/`)) {\n      pkg.eslintIgnore.push(`${output}/`);\n    }\n\n    await fs.writeFile(pak, JSON.stringify(pkg, null, 2));\n\n    const ignorefiles = [\n      path.join(root, '.gitignore'),\n      path.join(root, '.eslintignore'),\n    ];\n\n    for (const ignorefile of ignorefiles) {\n      if (await fs.pathExists(ignorefile)) {\n        const content = await fs.readFile(ignorefile, 'utf-8');\n\n        if (!content.split('\\n').includes(`${output}/`)) {\n          await fs.writeFile(\n            ignorefile,\n            `${content}\\n# generated by bob\\n${output}/\\n`\n          );\n        }\n      }\n    }\n\n    logger.success('Your project is configured!');\n  })\n  .command('build', 'build files for publishing', {}, async (argv) => {\n    const result = explorer.search();\n\n    if (!result?.config) {\n      logger.exit(\n        `No configuration found. Run '${argv.$0} init' to create one automatically.`\n      );\n    }\n\n    const options: Options = result!.config;\n\n    if (!(options.targets && options.targets.length)) {\n      logger.exit(\n        `No targets found in the configuration in '${path.relative(\n          root,\n          result!.filepath\n        )}'.`\n      );\n    }\n\n    const source = options.source;\n\n    if (!source) {\n      logger.exit(\n        `No source option found in the configuration in '${path.relative(\n          root,\n          result!.filepath\n        )}'.`\n      );\n    }\n\n    const output = options.output;\n\n    if (!output) {\n      logger.exit(\n        `No source option found in the configuration in '${path.relative(\n          root,\n          result!.filepath\n        )}'.`\n      );\n    }\n\n    const report = {\n      info: logger.info,\n      warn: logger.warn,\n      error: logger.error,\n      success: logger.success,\n    };\n\n    for (const target of options.targets!) {\n      const targetName = Array.isArray(target) ? target[0] : target;\n      const targetOptions = Array.isArray(target) ? target[1] : undefined;\n\n      report.info(`Building target ${chalk.blue(targetName)}`);\n\n      switch (targetName) {\n        case 'aar':\n          await buildAAR({\n            root,\n            source: path.resolve(root, source as string),\n            output: path.resolve(root, output as string, 'aar'),\n            options: targetOptions,\n            report,\n          });\n          break;\n        case 'commonjs':\n          await buildCommonJS({\n            root,\n            source: path.resolve(root, source as string),\n            output: path.resolve(root, output as string, 'commonjs'),\n            options: targetOptions,\n            report,\n          });\n          break;\n        case 'module':\n          await buildModule({\n            root,\n            source: path.resolve(root, source as string),\n            output: path.resolve(root, output as string, 'module'),\n            options: targetOptions,\n            report,\n          });\n          break;\n        case 'typescript':\n          await buildTypescript({\n            root,\n            source: path.resolve(root, source as string),\n            output: path.resolve(root, output as string, 'typescript'),\n            options: targetOptions,\n            report,\n          });\n          break;\n        default:\n          logger.exit(`Invalid target ${chalk.blue(targetName)}.`);\n      }\n    }\n  })\n  .demandCommand()\n  .recommendCommands()\n  .strict().argv;\n"],"file":"cli.js"}